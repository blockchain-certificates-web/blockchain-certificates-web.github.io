import{k as r,s as e,b as t}from"./elliptic-BYqApR8Y-CKp7atgR.js";import{B as n}from"./main.js";import{d as o}from"./base64url-Cy03LJLt-vkTPfQOh.js";const s="undefined"==typeof Buffer?n:Buffer,i=t=>{const n=r.from({...t,crv:"K-256"},"jwk").toString("blk","public"),o=e.publicKeyConvert(s.from(n,"hex"),!0);return s.from(o).toString("hex")},f=r=>t.encode(s.from(r,"hex"));const c=r=>{const e=new Uint8Array([237,1]),n=function(r){const{kty:e,crv:t,x:n}=r;if("OKP"!==e)throw new TypeError('"jwk.kty" must be "OKP".');if("Ed25519"!==t)throw new TypeError('"jwk.crv" must be "Ed25519".');if("string"!=typeof n)throw new TypeError('"jwk.x" must be a string.');const s=o(r.x);if(32!==s.length)throw new Error(`Invalid public key size (${s.length}); expected 32.`);return s}(r),s=new Uint8Array(e.length+n.length);s.set(e),s.set(n,e.length);var i;return`z${i=s,t.encode(i)}`};export{f as a,c as j,i as p};
