import{H as r,I as t}from"./main.js";async function o(o){if(!o.proof)return void console.warn("No proof found in the issuer profile.");let e=o.proof.type;"DataIntegrityProof"===e&&(e=r(o.proof.cryptosuite));const i=await async function(r){if(r===t.MerkleProof2019){const{default:r}=await import("./MerkleProof2019-0fhn8kLR-C2H_q6nV.js");return r}if(r===t.Ed25519Signature2020){const{default:r}=await import("./Ed25519Signature2020-B6Av-H9i-Bi3NyI0E.js");return r}if(r===t.EcdsaSecp256k1Signature2019){const{default:r}=await import("./EcdsaSecp256k1Signature2019-BALmC57B-DCQW1A4n.js");return r}if(r===t.EcdsaSd2023){const{default:r}=await import("./EcdsaSd2023-Bf8oG6yE-DXSfendb.js");return r}}(e),a=new i({document:o,proof:o.proof,issuer:o.issuer?o.issuer:o,executeStep:async(r,t,o)=>t()});await a.init();try{await a.verifyProof()}catch(r){throw new Error(`Issuer profile verification failed: ${r.message}`)}}export{o as default};
